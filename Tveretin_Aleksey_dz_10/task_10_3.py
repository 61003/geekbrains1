# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого
# числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order()
# вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт
# строку: *****\n*****\n*****.

class Cell:

    def __init__(self, count):
        self.count = count

    def __str__(self):
        return str(self.count)

    def __add__(self, other):
        return Cell(self.count + other.count)

    def __sub__(self, other):
        result = self.count - other.count
        return result if result > 0 else print('cell quantity cannot be negative')

    def __mul__(self, other):
        return Cell(self.count * other.count)

    def __truediv__(self, other):
        return Cell(self.count // other.count)

    def make_order(self, num):
        result = ''
        for cell in range(1, self.count + 1):
            if not cell % num:
                result += '*\n'
            else:
                result += '*'
        return result


my_cell_1 = Cell(32)
my_cell_2 = Cell(5)
my_cell_3 = my_cell_1 + my_cell_2
print(my_cell_3)
my_cell_4 = my_cell_1 - my_cell_2
print(my_cell_4)
my_cell_5 = my_cell_2 * my_cell_1
print(my_cell_5)
my_cell_6 = my_cell_1 / my_cell_2
print(my_cell_6)
print(my_cell_1.make_order(5))
